Pull an image

	docker pull <image_name>:<image_tag>

Check all images downloaded

	docker image list

Create (and run in background detached '-d', with interactive terminal connection '-it', to be removed after completion '--rm')
a new container (with options as -
sharing nvidia drivers with the container (requires nvidia-docker2 installed),
by connecting the network with 'local_host',
sharing a common folder 'shared_folder',
with the <container_name> being user specified and
building on top of 'image_name')

	docker run -d -it --rm \
	--runtime=nvidia \
	-v <shared_folder_host>:<shared_folder_container> \
	--net=host \
	--name <container_name> \
	<image_name>:<image_tag>

Check all containers

	docker ps -a

Check running containers

	docker ps

Start a docker container

	docker start <container_name>

Attach a running docker container to current bash terminal

	docker exec -it <container_name> bash

Stop a docker container

	docker stop <container_name>

Commint a container as an image

	docker commit <container_name> <image_name>:<image_tag>

Remove a docker container

	docker rm <container_name>

Remove a docker image

	docker rmi <image_name>:<image_tag>










NOTE: To allow use of nvidia GPU usage inside the container,
	add '--runtime=nvidia' to the 'docker run' command while creating a new container,
	see details on https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0)

NOTE: To get a coloured bash, uncomment '#force_color_prompt=yes' line in ~/.bashrc

NOTE: For ease in use, add the following to your ~/.bashrc file
	alias docker_<tag>='docker start <container_name> && docker exec -it <container_name> bash'
	alias docker_<tag>_stop='docker stop <container_name>'

NOTE: Details of running GUI from within docker are well explained on http://wiki.ros.org/docker/Tutorials/GUI
	In short, we need the following to be added to 'docker run' (although, rivz is still not supported)
		--user="root" \
		--env="DISPLAY" \
		--volume="/etc/group:/etc/group:ro" \
		--volume="/etc/passwd:/etc/passwd:ro" \
		--volume="/etc/shadow:/etc/shadow:ro" \
		--volume="/etc/sudoers.d:/etc/sudoers.d:ro" \
		--volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" \
	Beware that the above mentioned options allow for any code in docker to open a window on host PC,
	which could be a big security threat due to root user access. At the same time,
	if no root user access to the container, then the container might not behave properly.


