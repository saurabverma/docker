Pull an image

	docker pull <image_name>:<image_tag>

Check all images downloaded

	docker image list

Create a new container (by connecting the network with 'local_host',
sharing display for GUI with 'local_host',
sharing nvidia drivers with the container (requires nvidia-docker2 installed),
sharing a common folder 'shared_folder' and building on top of 'image_name')

	docker run -it \
	-e DISPLAY=$DISPLAY \
	--runtime=nvidia \
	-v <shared_folder_host>:<shared_folder_container> \
	--net=host \
	<image_name>:<image_tag> \
	bash

Check all containers

	docker ps -a

Check running containers

	docker ps

Start a docker container

	docker start <container_name>

Attach a running docker container to current bash terminal

	docker exec -it <container_name> bash

Stop a docker container

	docker stop <container_name>

Commint a container as an image

	docker commit <container_name> <image_name>:<image_tag>

Remove a docker container

	docker rm <container_name>

Remove a docker image

	docker rmi <image_name>:<image_tag>

NOTE: To allow use of nvidia GPU usage inside the container,
	add '--runtime=nvidia' to the 'docker run' command while creating a new container,
	see details on https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0)
NOTE: Details of running GUI from within docker are well explained on http://wiki.ros.org/docker/Tutorials/GUI
NOTE: To get a coloured bash, uncomment '#force_color_prompt=yes' line in ~/.bashrc
NOTE: For ease in use, add the following to your ~/.bashrc file
	alias docker_<tag>='docker start <container_name> && docker exec -it <container_name> bash'
	alias docker_<tag>_stop='docker stop <container_name>'
